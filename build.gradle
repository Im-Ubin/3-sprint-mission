import org.gradle.testing.jacoco.tasks.JacocoCoverageVerification

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.sprint.mission'
version = '1.2-M8'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'
    implementation("org.mapstruct:mapstruct:1.5.5.Final")
//    implementation 'de.codecentric:spring-boot-admin-starter-client'
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.named("jacocoTestCoverageVerification", JacocoCoverageVerification) {
    // test가 먼저 실행된 후 검증하도록 보장
    dependsOn test

    violationRules {
        rule {
            element = 'BUNDLE'
            includes = ['com.sprint.mission.discodeit.service.basic.*']
            limit {
                counter = 'LINE'
                value   = 'COVEREDRATIO'
                minimum = 0.60
            }
        }
    }
}

tasks.check {
    dependsOn tasks.named("jacocoTestCoverageVerification")
}

tasks.named('test') {
    useJUnitPlatform()
}

//Admin 관련 설정
//
//ext {
//    springBootAdminVersion = "3.4.7"
//}
//
//dependencyManagement {
//    imports {
//        mavenBom "de.codecentric:spring-boot-admin-dependencies:$springBootAdminVersion"
//    }
//}